@using ChartJs.Blazor.BarChart
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Enums
@using ChartJs.Blazor.Util
@using System.Drawing
@page "/bar"
<Chart Config="_config" @ref="_chart"></Chart>

<button @onclick="RandomizeData">Randomize Data</button>
<button @onclick="AddDataset">Add Dataset</button>
<button @onclick="RemoveDataset">Remove Dataset</button>
<button @onclick="AddData">Add Data</button>
<button @onclick="RemoveData">Remove Data</button>

@code { private const int InitalCount = 7;
            private BarConfig _config;
            private Random _rng = new Random();
            private Chart _chart;

            protected override void OnInitialized()
            {
                _config = new BarConfig(horizontal: true)
                {
                    Options = new BarOptions
                    {
                        Responsive = true,
                        Legend = new Legend
                        {
                            Position = Position.Right
                        },
                        Title = new OptionsTitle
                        {
                            Display = true,
                            Text = "ChartJs.Blazor Horizontal Bar Chart"
                        }
                    }
                };

                IDataset<int> dataset1 = new BarDataset<int>(SampleUtils.RandomScalingFactor(InitalCount), horizontal: true)
                {
                    Label = "Pune",
                    BackgroundColor = ColorUtil.FromDrawingColor(Color.FromArgb(128, SampleUtils.ChartColors.Red)),
                    BorderColor = ColorUtil.FromDrawingColor(SampleUtils.ChartColors.Red),
                    BorderWidth = 3
                };

                IDataset<int> dataset2 = new BarDataset<int>(SampleUtils.RandomScalingFactor(InitalCount), horizontal: true)
                {
                    Label = "Mumbai",
                    BackgroundColor = ColorUtil.FromDrawingColor(Color.FromArgb(128, SampleUtils.ChartColors.Blue)),
                    BorderColor = ColorUtil.FromDrawingColor(SampleUtils.ChartColors.Blue),
                    BorderWidth = 3
                };

                foreach (var test in SampleUtils.TimeofTheDay)
                {
                    _config.Data.Labels.Add(test);
                }

              
                _config.Data.Datasets.Add(dataset1);
                _config.Data.Datasets.Add(dataset2);
            }

            private void RandomizeData()
            {
                foreach (IDataset<int> dataset in _config.Data.Datasets)
                {
                    int count = dataset.Count;
                    dataset.Clear();
                    for (int i = 0; i < count; i++)
                    {
                        if (_rng.NextDouble() < 0.2)
                        {
                            dataset.Add(0);
                        }
                        else
                        {
                            dataset.Add(SampleUtils.RandomScalingFactor());
                        }
                    }
                }

                _chart.Update();
            }

            private void AddDataset()
            {
                Color color = SampleUtils.ChartColors.All[_config.Data.Datasets.Count % SampleUtils.ChartColors.All.Count];
                IDataset<int> dataset = new BarDataset<int>(SampleUtils.RandomScalingFactor(_config.Data.Labels.Count), horizontal: true)
                {
                    Label = $"Dataset {_config.Data.Datasets.Count}",
                    BackgroundColor = ColorUtil.FromDrawingColor(Color.FromArgb(128, color)),
                    BorderColor = ColorUtil.FromDrawingColor(color),
                    BorderWidth = 1
                };

                _config.Data.Datasets.Add(dataset);
                _chart.Update();
            }

            private void RemoveDataset()
            {
                IList<IDataset> datasets = _config.Data.Datasets;
                if (datasets.Count == 0)
                    return;

                datasets.RemoveAt(datasets.Count - 1);
                _chart.Update();
            }

            private void AddData()
            {
                if (_config.Data.Datasets.Count == 0)
                    return;

                string month = SampleUtils.TimeofTheDay[_config.Data.Labels.Count % SampleUtils.TimeofTheDay.Count];
                _config.Data.Labels.Add(month);

                foreach (IDataset<int> dataset in _config.Data.Datasets)
                {
                    dataset.Add(SampleUtils.RandomScalingFactor());
                }

                _chart.Update();
            }

            private void RemoveData()
            {
                if (_config.Data.Datasets.Count == 0 ||
                    _config.Data.Labels.Count == 0)
                {
                    return;
                }

                _config.Data.Labels.RemoveAt(_config.Data.Labels.Count - 1);

                foreach (IDataset<int> dataset in _config.Data.Datasets)
                {
                    dataset.RemoveAt(dataset.Count - 1);
                }

                _chart.Update();
            } }